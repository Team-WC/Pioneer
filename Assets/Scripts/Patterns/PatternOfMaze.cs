using UnityEngine;
using System.Collections;

public class PatternOfMaze : PatternSetting
{
    string[] mazePattern = new string[]
    {
        "##########     ###################################",
        "##########     ###################################",
        "##########     ###################################",
        "##########     ###################################",
        "##########     ######                    #########",
        "##########     ######                    #########",
        "##########     ######                    #########",
        "##########     ######     ##########     #########",
        "##########                ##########     #########",
        "##########                ##########     #########",
        "####################################     #########",
        "####################################     #########",
        "####################################     #########",
        "####################################     #########",
        "################                         #########",
        "################                         #########",
        "################                         #########",
        "##################       #########################",
        "###################       ########################",
        "####################       #######################",
        "#####################       ######################",
        "######################       #####################",
        "#######################       ####################",
        "########################       ###################",
        "#########################       ##################",
        "########################       ###################",
        "#######################       ####################",
        "######################       #####################",
        "#####################       ######################",
        "####################       #######################",
        "################          ########################",
        "################          ########################",
        "################                            ######",
        "################                            ######",
        "################                            ######",
        "################         ############       ######",
        "################         ############       ######",
        "################         ############       ######",
        "#####################################       ######",
        "#####################################       ######",
        "#####################################       ######",
        "#####################################       ######",
        "#####################################       ######",
        "##################                          ######",
        "#################                           ######",
        "################                            ######",
        "###############     ##############################",
        "##############     ###############################",
        "#############     ################################",
        "############     #################################",
        "###########     ##################################",
        "##########     ###################################",
    };

    public IEnumerator Start()
    {
        bullet.shotSpeed = 1f;
        bullet.aliveTime = 10f;

        shotAngle = 105f;
        shotCount = 50f;
        interval = 0.3f;

        int j = 0;
        while (true)
        {

            for (int i = 0; i < shotCount; i++)
            {
                if (mazePattern[j][i] == '#')
                    Instantiate(bullet, transform.position, Quaternion.Euler(0, shotAngle + i * 3, 0));
            }
            j++;

            if (j == mazePattern.Length)
                j = 0;

            yield return new WaitForSeconds(interval);
        }
    }
}